
**STACK
can be implemented in 3 ways
1)using list
2)using linked list
3)using module called queue
#operations:
1)push
2)pop
3)peek or top
4)empty or pull

###stack-lifo
stack=[]
def push():
    element=int(input("Enter the element"))
    stack.append(element)
    print(stack)
def pop_element():
    if not stack:
        print("stack is empty")
    else:
        e=stack.pop()
        print("element removed:",e)
        print(stack)

while True:
    print("select operation:1)push 2)pop 3)exit ")
    select=int(input())
    if select==1:
        push()
    elif select==2:
        pop_element()
    elif select==3:
        break
    else:
        print("invalid operation")
OUTPUT:
select operation:1)push 2)pop 3)exit 
1
Enter the element200
[200]
select operation:1)push 2)pop 3)exit 
1
Enter the element300
[200, 300]
select operation:1)push 2)pop 3)exit 
2
element removed: 300
[200]
select operation:1)push 2)pop 3)exit 
2
element removed: 200
[]
select operation:1)push 2)pop 3)exit 
2
stack is empty
select operation:1)push 2)pop 3)exit 


**STACK IMPLEMENTATION USING LINKED LIST
1)push is inserting node at beginning
2)pop is removing the head node

###stack using linkedlist
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Stack:
    def __init__(self):
        self.head=None
    def isempty(self):
        if self.head==None:
            return True
        else:
            return False
    def push(self,data):
        if self.head==None:
            self.head=Node(data)
        else:
            newnode=Node(data)
            newnode.next=self.head
            self.head=newnode
    def pop(self):
        if self.isempty():
            return None
        else:
            poppednode=self.head
            self.head=self.head.next
            poppednode.next=None
            return poppednode.data
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.head.data
    def display(self):
        temp=self.head
        if self.isempty():
            print("Stack Underflow")
        else:
            while(temp!=None):
                print(temp.data,end=" ")
                temp=temp.next
                if(temp!=None):
                    print("->",end=" ")
            return
if __name__=="__main__":
    S=Stack()
    S.push(1)
    S.push(2)
    S.push(3)
    S.push(4)
    S.display()
    print("")
    print("peek",S.peek())
    S.pop()
    S.pop()
    S.display()
    print("")
    print("peek",S.peek())

OUTPUT:
4 -> 3 -> 2 -> 1 
peek 4
2 -> 1 
peek 2    


##QUEUE
from queue import LifoQueue
s=LifoQueue(maxsize=3)
print(s.qsize())
s.put('a')
s.put('b')
s.put('c')

print(s.full())
print(s.qsize())
print(s.get())
print(s.get())
print(s.get())

print(s.empty())

OUTPUT:
0
True
3
c
b
a
True

###QUEUE IMPLEMENTATION USING LIST or ARRAY
queue=[]
def enqueue():
    element=input("enter elememnt")
    queue.append(element)
    print(element,"is added in Q")
def dequeue():
    if not queue:
        print("Q is empty")
    else:
        e=queue.pop(0)
        print("removed element",e)
def display():
    print(queue)
while True:
    print("Select operation 1.enqueue 2.dequeue 3.show 4.exit")
    
    select=int(input())
    if select==1:
        enqueue()
    elif select==2:
        dequeue()
    elif select==3:
        display()
    elif select==4:
        break
    else:
        print("invalid operation")

OUTPUT:
Select operation 1.enqueue 2.dequeue 3.show 4.exit
1
enter elememnt12
12 is added in Q
Select operation 1.enqueue 2.dequeue 3.show 4.exit
1
enter elememnt32
32 is added in Q
Select operation 1.enqueue 2.dequeue 3.show 4.exit
1
enter elememnt4
4 is added in Q
Select operation 1.enqueue 2.dequeue 3.show 4.exit
2
removed element 12
Select operation 1.enqueue 2.dequeue 3.show 4.exit
2
removed element 32
Select operation 1.enqueue 2.dequeue 3.show 4.exit
2
removed element 4
Select operation 1.enqueue 2.dequeue 3.show 4.exit
2
Q is empty
Select operation 1.enqueue 2.dequeue 3.show 4.exit
3
[]
Select operation 1.enqueue 2.dequeue 3.show 4.exit
1
enter elememnt123
123 is added in Q
Select operation 1.enqueue 2.dequeue 3.show 4.exit
3
['123']
Select operation 1.enqueue 2.dequeue 3.show 4.exit

###queue example
import queue
L=queue.Queue(maxsize=5)
L.put(10)
L.put(20)
print(type(L))
print(L.get())
print(L.get())
OUTPUT:
<class 'queue.Queue'>
10
20


##CREATE 2 STACKS:define size of both stacks as 5.if your i/p is even no it has to pushed in stack_1 and other i/p has to be pushed in stack_2
option:push/pop/display_stack/quit
#create2 stack push if input even in stack1 and other in stack2
stack1=[]
stack2=[]

def push():
    for i in range(5):
        element=int(input("Enter the element"))
    if(element%2==0):
        stack1.append(element)
    else:
        stack2.append(element)
    
    
def pop_element():
    popwhat=input("1or2")
    if popwhat=="1":
        if not stack1:
            print("stack is empty")
        else:
            e=stack1.pop()
            print("element removed:",e)
            print(stack1)
    else:
        if not stack2:
            print("stack is empty")
        else:
            e=stack2.pop()
            print("element removed:",e)
            print(stack2)
def show():
    show=input("1 or2")
    if show=="1":
        print(stack1)
    else:
        print(stack2)
while True:
    print("select operation:1)push 2)pop 3)show 4)exit")
    select=int(input())
    if select==1:
        push()
    elif select==2:
        pop_element()
    elif select==3:
        show()
    elif select==4:
        break
    else:
        print("invalid operation")

##queue implementing using linked list
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class Queue:
    def __init__(self):
        self.head=None
        self.last=None
    def enqueue(self,data):
        if self.last is None:
            self.head=Node(data)
            self.last=self.head
        else:
            self.last.next=Node(data)
            self.last=self.last.next
    def dequeue(self):
        if self.head is None:
            return None
        else:
            to_return=self.head.data
            self.head=self.head.next
            return to_return
a_queue=Queue()
while True:
    print("enqueue <value>")
    print("dequeue")
    print("quit")
#by using split,do will become a list,split works with string
    do=input("What would you like to do? ").split()
    operation=do[0].strip().lower()
    if operation == 'enqueue':
        a_queue.enqueue(int(do[1]))
    elif operation == 'dequeue':
        dequeued=a_queue.dequeue()
        if dequeued is None:
            print("Queue is empty")
        else:
            print("Dequeued element: ",int(dequeued))
    elif operation == 'quit':
        break

OUTPUT:
enqueue <value>
dequeue
quit
What would you like to do? ENQUEUE100
enqueue <value>
dequeue
quit
What would you like to do? ENQUEUE200
enqueue <value>
dequeue
quit
What would you like to do? DEQUEUE
Queue is empty
enqueue <value>
dequeue
quit
What would you like to do? 



**TYPES OF QUEUES
1)circular queue
2)priority queue

*PRIORITY QUEUE: though ythe elements are in queue as per the priority given to the elements will get privilige to pop from the queue.

*CIRCULAR QUEUE:
empty spaces in the queue can be used,once the queue is full still want to add elements in a circular way.
step
1)front,rear=-1
2)while inserting increase the front front=front+1

INSERTION: rear=rear+1
DELETION: front=front+1































        